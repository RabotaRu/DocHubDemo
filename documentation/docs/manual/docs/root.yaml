imports:
  - examples/table.yaml
docs:
  # *****************************************  
  #        Руководство по документам 
  # *****************************************  
  dochub.docs:
    location: DocHub/Руководство/Документы
    description: Документы
    autor: R.Piontik        # Кастомное поле - Автор документа
    type: markdown
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: docs.md
  dochub.markdown:
    location: DocHub/Руководство/Документы/Markdown
    description: Markdown
    autor: R.Piontik
    type: markdown
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: markdown.md
  dochub.plantuml:
    location: DocHub/Руководство/Документы/PlantUML
    description: PlantUML
    autor: R.Piontik
    type: markdown
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: plantuml.md
  dochub.mermaid:
    location: DocHub/Руководство/Документы/Mermaid
    description: Mermaid
    autor: R.Piontik
    type: markdown
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: mermaid.md
  dochub.network:
    location: DocHub/Руководство/Документы/Network
    description: Network
    autor: R.Piontik
    type: markdown
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: network.md
  dochub.asyncapi:
    location: DocHub/Руководство/Документы/AsyncApi
    description: Markdown
    type: markdown
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: asyncapi.md
  dochub.swagger:
    location: DocHub/Руководство/Документы/Swagger
    description: Swagger
    autor: R.Piontik
    type: markdown
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: swagger.md
  dochub.tables:
    location: DocHub/Руководство/Документы/Таблицы
    description: Таблицы
    autor: R.Piontik
    type: markdown
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: tables.md
  # *****************************************  
  #            Примеры документов
  # *****************************************  
  dochub.example.pml:
    type: PlantUML
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: examples/example.puml
  dochub.example.mermaid:
    type: Mermaid
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: examples/mermaid.mmd
  dochub.example.network:
    type: Network
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: >
      (
        $manifest := $;
        /* Перебираем все компоненты */
        $adges  := $distinct(components.$spread().(
          $node_id := $keys()[0];
          $node := $.*;
          /* Определяем связи */
          $node.links.{
            "from": $node_id,
            "to": id,
            "label": title
          }
        ));
        /* Выявляем ноды из связей */
        $nodes := $distinct($append($adges.from, $adges.to)).(
          $struct := $split($, ".");
          $group := $replace($, "." & $reverse($struct)[0], "");
          {
            "id": $,
            "label": $lookup($manifest.components, $).title,
            "group": $group,
            "level": $count($struct),
            /* Позиционируем ноду тем выше, чем выше слой */
            "y": $count($struct) * 200
          }
        );
        /* Добавляем ноды легенды */
        $nodes := $append($nodes, (
          /* Получаем максимальную точку позиции нод */
          $height := $max($nodes.y);
          $groups := $distinct($nodes.group)^($);
          /* Вычисляем центр легенды */
          $offset := -($height / 2);
          /* Определяем шаг легенды */
          $step := $height / $count($groups);
          /* Строим легенду */
          $map($groups, function($v, $i, $a) {
            {
              "id": "legend-" & $string($i),
              "x": -600,
              "y": $i * $step + $offset,
              "shape": "square",
              "label": $v,
              "group": $v,
              "value": 1,
              "fixed": true,
              "physics": false
            }
          })
        ));
        /* Выводим результат */
        {
          "nodes": $nodes, /* Массив нод */
          "edges": $adges, /* Массив связей */
          "options": {     /* Параметры сетевой диаграммы https://visjs.github.io/vis-network/docs/network/ */
            "clickToUse": false /* Отключаем обязательный клик перед взаимодействем с пользователем */
          }
        }
      )
  dochub.example.swgr:
    type: OpenAPI
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: examples/example.yaml
  dochub.example.asyncapi:
    type: AsyncApi
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    source: examples/asyncapi.yaml
  # *****************************************  
  #                 Шаблоны
  # *****************************************  
  dochub.templates:         # Пример генерации markdown документа по шаблону
    location: DocHub/Руководство/Документы/Шаблоны
    description: Шаблоны
    type: markdown
    autor: R.Piontik        # Кастомное поле - Автор документа
    approvers:              # Кастомное поле - список согласующих
      - P.Petrov
      - S.Sidorov
      - N.Nikolaev
    source: >               # JSONata запрос для формирования параметров шаблона
      (
        {
          "id": $self._id,              /* Идентификатор документа */
          "autor": $self.autor,         /* Автор документа */
          "approvers": $self.approvers, /* Согласующие */
          "docs": [docs.$spread().{     /* Другие документы автора */
            "id": $keys()[0],
            "title": *.description,
            "autor": *.autor
          }][autor=$self.autor]
        }
      )
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    template: templates.md  # Шаблон документа
  dochub.templates.pml: # Пример генерации PlantUML документа по шаблону
    type: PlantUML
    source: >
      (
        {
          "entities": $distinct([     /* Получаем все использованные сущности при описании архитектуры */ 
              components.*.entity
          ])
        }
      )
    subjects:
      - dochub.front
      - dochub.front.spa
      - dochub.front.spa.blank
      - dochub.front.spa.blank.doc
    template: examples/template.puml
  dochub.templates.asyncapi: # Пример генерации AsyncAPI документа по шаблону
    type: AsyncAPI
    source: >
      (
        $BODY := $mergedeep([components.*.asyncapi]);
        {
            "content": [$BODY.$spread().{
                "field": $keys()[0],
                "body": $string($lookup($, $keys()[0]))
            }]
        }
      )
    template: examples/asyncapi_template.json
  dochub.templates.openapi: # Пример генерации OpenAPI документа по шаблону
    type: OpenAPI
    source: >
      (
        $BODY := $mergedeep([components.*.openapi]);
        {
            "content": [$BODY.$spread().{
                "field": $keys()[0],
                "body": $string($lookup($, $keys()[0]))
            }]
        }
      )
    template: examples/openapi_template.json
